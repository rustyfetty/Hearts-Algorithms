{"name":"Hearts - Paranoid vs Maxn algorithms","tagline":"Paranoid vs Maxn","body":"### Paranoid vs. Max<sup>n</sup>\r\nTwo common multiplayer algorithms are the paranoid (Sturtevant and Korf, 2000) and the max<sup>n</sup> (Lockhardt and Irani, 1986). The question I have is, which will be better in a game of Hearts?\r\n\r\n### How I'm Doing So Far\r\nThe graphs below show how my algorithms are doing so far.\r\n\r\n![](https://raw.githubusercontent.com/rustyfetty/Hearts-Algorithms/master/Photos/Scores30Games100000.png)\r\n\r\n![](https://raw.githubusercontent.com/rustyfetty/Hearts-Algorithms/master/Photos/AverageTimePerMove30Games100000.png)\r\n\r\n### About This Project\r\nThe purpose of this project is to find if the paranoid or max<sup>n</sup> algorithm is the better player at Hearts. The project contains three types of players: paranoid, max<sup>n</sup>, and random. With these three players, I will be able to evaluate the playing capabilities of each algorithm.\r\n\r\nThe max<sup>n</sup> algorithm, created by Lockhardt and Irani, is a tree search-type algorithm. It assumes that all players are trying to maximize their own personal score. The crucial point in writing this algorithm is creating good tie-breaking strategies. The downside to the max<sup>n</sup> algorithm is that it can't easily be pruned.\r\n\r\n![](https://raw.githubusercontent.com/rustyfetty/Hearts-Algorithms/master/Photos/MaxTree.png)\r\n(The number in each node stands for the player. Each node contains a tuple, where the n<sup>th</sup> item stands for the n<sup>th</sup> player's score.)\r\n\r\nThe paranoid algorithm, created by Sturtevant and Korf, is a minimax algorithm. This algorithm assumes all players are trying to give it the worst score possible, so it must pick a branch that has the best return for itself. The thing that give the paranoid algorithm its edge over the max<sup>n</sup> algorithm is it can use alpha-beta pruning. The downside is if you search too far into the tree, the algorithm can become worse.\r\n\r\n![](https://raw.githubusercontent.com/rustyfetty/Hearts-Algorithms/master/Photos/ParanoidTree.png)\r\n(A downward triangle stands for a min player, and an upward triangle stands for a max player. The number in each node stands for the player, and the number outside each node stands for the score that node represents.)\r\n\r\nThe two algorithms use depth first search on a tree of possible game outcomes. The number of possibilities in the game of hearts limits the depth each algorithm can search. This is where the paranoid algorithm has an advantage of the max<sup>n</sup>, because it can do alpha-beta pruning it can search deeper into the tree.\r\n\r\nTo test these algorithms I will be recording the time it take to finish the algorithm, and the average score of each head that is dealt. The graphs above are from 30 games with a maximum node search of 100000 nodes.\r\n\r\n### The Reason Why\r\nI wanted to take up this project because most of the good game algorithms are for two-player games. While I don't think I will have any breakthroughs for multiplayer game algorithms, I can find which one of these algorithms is better.\r\n\r\n\r\n### Author\r\nRussell Fetty (@rustyfetty)\r\nThank you to the creator of PyHearts for a platform from which to begin.\r\n\r\n### References\r\nhttp://webdocs.cs.ualberta.ca/~nathanst/papers/comparison_algorithms.pdf\r\nhttps://dke.maastrichtuniversity.nl/m.winands/documents/BestReplySearch.pdf\r\nhttp://www2.cs.uni-paderborn.de/cs/ag-monien/PERSONAL/FLULO/publications/icga_acg.pdf\r\nhttp://neverstopbuilding.com/minimax\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}